#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <MySQL_Generic.h>

#define SS_PIN D4  //--> SDA / SS is connected to pinout D2
#define RST_PIN D3  //--> RST is connected to pinout D1
MFRC522 mfrc522(SS_PIN, RST_PIN);  //--> Create MFRC522 instance.
LiquidCrystal_I2C lcd(0x27, 20, 4);

#define ON_Board_LED 2  //--> Defining an On Board LED, used for indicators when the process of connecting to a wifi router

//----------------------------------------SSID and Password of your WiFi router-------------------------------------------------------------------------------------------------------------//
const char* ssid = "Infinix ZERO 30 5G";
char pass[] = "Hydrargyrum";

char server[] = "192.168.189.132";
uint16_t server_port = 80;  //--> Server on port 80

// Database Account
char user[]         = "theiotprojects";
char password[]     = "theiotprojects.com";

//Database Name
char database[] = "nodemcu_rfid_iot_projects";
char table[]    = "table_the_iot_projects";

// Query
String query = String("SELECT name,id,gender,mobile FROM ") + database + "." + table + (" ORDER BY id DESC LIMIT 1;");

String name = "";
String id = "";
String gender = "";
String mobile = "";

// Create an instance of the cursor passing in the connection
MySQL_Connection conn((Client *)&client);
MySQL_Query sql_query = MySQL_Query(&conn);

int readsuccess;
byte readcard[4];
char str[32] = "";
String StrUID;

//-----------------------------------------------------------------------------------------------SETUP--------------------------------------------------------------------------------------//
void setup() {
  Serial.begin(115200); //--> Initialize serial communications with the PC
  SPI.begin();      //--> Init SPI bus
  mfrc522.PCD_Init(); //--> Init MFRC522 card

  delay(500);
  //initialize lcd screen
  lcd.init();
  // turn on the backlight
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(5,0); //col=0 row=0
  lcd.print("CROPTRACE:");
  lcd.setCursor(0,1); //col=0 row=0
  lcd.print("An IOTA-Based Supply");
  lcd.setCursor(2,2); //col=0 row=0
  lcd.print("Chain Management");
  lcd.setCursor(7,3); //col=0 row=0
  lcd.print("System");
  delay(3000);

  WiFi.begin(ssid, pass); //--> Connect to your WiFi router
  Serial.println("");

  pinMode(ON_Board_LED, OUTPUT);
  digitalWrite(ON_Board_LED, HIGH); //--> Turn off Led On Board

  //----------------------------------------Wait for connection
  Serial.print("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    lcd.clear();
    lcd.setCursor(0,0); //col=0 row=0
    lcd.print("Connecting to Wi-Fi");
    Serial.print(".");
    //----------------------------------------Make the On Board Flashing LED on the process of connecting to the wifi router.
    digitalWrite(ON_Board_LED, LOW);
    delay(250);
    digitalWrite(ON_Board_LED, HIGH);
    delay(250);
  }
  digitalWrite(ON_Board_LED, HIGH); //--> Turn off the On Board LED when it is connected to the wifi router.
  //----------------------------------------If successfully connected to the wifi router, the IP Address that will be visited is displayed in the serial monitor
  lcd.clear();
  lcd.setCursor(2,0); //col=0 row=0
  Serial.print("Connected to Wi-Fi ");

  Serial.println("");
  Serial.print("Successfully connected to : ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  //Serial.println("Connecting...");
  Serial.print("Connecting to SQL Server @ ");
  Serial.print(server_addr);
  Serial.println(String(", Port = ") + server_port);
  Serial.println(String("User = ") + user + String(", PW = ") + password + String(", DB = ") + database);

  lcd.clear();
  lcd.setCursor(1,0); //col=0 row=0
  lcd.print("Scan CROPTRACE Tag");

  Serial.println("Please tag a card or keychain to see the UID !");
  Serial.println("");
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------LOOP---------------------------------------------------------------------------------------//
void loop() {
  // put your main code here, to run repeatedly
  readsuccess = getid();

  if (readsuccess) {
    digitalWrite(ON_Board_LED, LOW);
    HTTPClient http;    //Declare object of class HTTPClient
    WiFiClient client;

    String UIDresultSend, postData;
    UIDresultSend = StrUID;

    //Post Data
    postData = "UIDresult=" + UIDresultSend;

    http.begin(client, "http://192.168.189.132/NodeMCU-and-RFID-RC522-IoT-Projects/getUID.php");  //Specify request destination
    http.addHeader("Content-Type", "application/x-www-form-urlencoded"); //Specify content-type header

    int httpCode = http.POST(postData);   //Send the request
    String payload = http.getString();    //Get the response payload

    Serial.println(UIDresultSend);
    Serial.println(httpCode);   //Print HTTP return code
    Serial.println(payload);    //Print request response payload

    http.end();  //Close connection
    delay(1000);
    digitalWrite(ON_Board_LED, HIGH);
  }

  // Sending query
  Serial.println("Connecting...");
  if (conn.connectNonBlocking(server_addr, server_port, user, password) != RESULT_FAIL)
  {
    row_values *row = NULL;
    String Pname = "";
    String Pid = "";
    String Pgender = "";
    String Pmobile = "";

    // Initiate the query class instance
    MySQL_Query query_mem = MySQL_Query(&conn);

    // Print the query
    Serial.println(query);

    // Execute the query
    // KH, check if valid before fetching
    if ( !query_mem.execute(query.c_str()) )
    {
      Serial.println("Querying error");
      return;
    }

    // Fetch the columns (required) but we don't use them.
    column_names *columns = query_mem.get_columns();

    // Read the row (we are only expecting the one)
    do
    {
      row = query_mem.get_next_row();

      if (row != NULL)
      {
        Pname = row->values[0];
        Pid = atof(row->values[1]);
        Pgender = atof(row->values[2]);
        Pmobile = atof(row->values[4]);
      }
    } while (row != NULL);

    // Export
    name = Pname;
    id = Pid;
    gender = Pgender;
    mobile = Pmobile;
    delay(500);

    // Now we close the connection to free any memory
    sql_query.close();
    conn.close();            
  }
  else
  {
    Serial.println("\nConnect failed. Trying again on next iteration.");
  }

  // Showing results in serial
  Serial.println("Values:");
  Serial.println("Name: " + String(name));
  Serial.println("UID: " + String(id));
  Serial.println("Crop: " + String(gender));
  Serial.println("Mobile No: " + String(mobile));

  // Showing results on lcd
  lcd.setCursor(0, 0);
  lcd.print("Name:" + String(name));
  lcd.setCursor(0, 1);
  lcd.print("UID:" + String(id));
  lcd.setCursor(0, 2);
  lcd.print("Crop:" + String(gender));
  delay(3000);
  lcd.setCursor(0, 3);
  lcd.print("No:" + String(mobile));
  delay(3000);
  Serial.println("\nSleeping...");
  Serial.println("================================================");
  delay(1500);
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

//----------------------------------------Procedure for reading and obtaining a UID from a card or keychain---------------------------------------------------------------------------------//
int getid() {
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return 0;
  }
  if (!mfrc522.PICC_ReadCardSerial()) {
    return 0;
  }

  Serial.print("THE UID OF THE SCANNED CARD IS : ");

  for (int i = 0; i < 4; i++) {
    readcard[i] = mfrc522.uid.uidByte[i]; //storing the UID of the tag in readcard
    array_to_string(readcard, 4, str);
    StrUID = str;
  }
  mfrc522.PICC_HaltA();
  return 1;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

//----------------------------------------Procedure to change the result of reading an array UID into a string------------------------------------------------------------------------------//
void array_to_string(byte array[], unsigned int len, char buffer[]) {
  for (unsigned int i = 0; i < len; i++)
  {
    byte nib1 = (array[i] >> 4) & 0x0F;
    byte nib2 = (array[i] >> 0) & 0x0F;
    buffer[i * 2 + 0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
    buffer[i * 2 + 1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
  }
  buffer[len * 2] = '\0';
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
